using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins;
using Noggog;


namespace ContainersRespawnPatcher
{
    public class Program
    {
        // Dictionaries of containers
        internal static Dictionary<P2Int, ICell?> originalCellGrid = new();
        internal static Dictionary<P2Int, IModContext<ISkyrimMod, ISkyrimModGetter, ICell, ICellGetter>> tamrielCellGrids = new();

        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynthesisContainers.esp")
                .Run(args);
        }

        /*public static void CreateNewContainers(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            System.Console.WriteLine("Creating new 'No Respawn' containers!");

            // Counter
            int nbCont = 0;

            foreach (var containerGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IContainerGetter>())
            {
                // Skip null container EditorID
                if (containerGetter.EditorID is null) continue;

                // If the EditorID of the container is found in the settings
                if (Settings.SafeContainersSettings.ContainerEditorIDs.Contains(containerGetter.EditorID))
                {
                    if (Settings.debug)
                        System.Console.WriteLine("Container found: " + containerGetter.EditorID);

                    // Check if the container already exists
                    state.LinkCache.TryResolve<IContainer>(containerGetter.EditorID + "_NoRespawn", out var existing);
                    if (existing is not null)
                    {
                        if (Settings.debug)
                            System.Console.WriteLine("   > Container _NoRespawn already exists: " + existing?.EditorID);

                        continue;
                    }

                    // Duplicate the record
                    Container contNew = state.PatchMod.Containers.DuplicateInAsNewRecord<Container, IContainerGetter>(containerGetter);

                    // Get the existing record
                    var contOld = state.PatchMod.Containers.GetOrAddAsOverride(containerGetter);

                    // Skip null
                    if (contOld.EditorID is null || contNew.EditorID is null) continue;

                    // If the container has a Respawn flag already, duplicate it and add no respawn
                    if (containerGetter.Flags.HasFlag(Container.Flag.Respawns))
                    {
                        // Name the new container NORESPAWN & remove the respawn flag 
                        contNew.EditorID = containerGetter.EditorID + "_NoRespawn";
                        contNew.Flags.SetFlag(Container.Flag.Respawns, false);

                        if (Settings.debug)
                            System.Console.WriteLine("   > Created new container: " + contNew.EditorID);

                        //Count
                        nbCont++;
                    }
                    // The container does not have the flag
                    else
                    {
                        // If the existing container has NoRespawn in their editorID, ignore it altogether
                        if (contOld.EditorID.Contains("norespawn", StringComparison.OrdinalIgnoreCase)) continue;

                        // Append the _NoRespawn text to the copy
                        contNew!.EditorID = contNew.EditorID + "_NoRespawn";

                        // Add the flag to the original container
                        contOld.Flags |= Container.Flag.Respawns;


                        if (Settings.debug)
                        {
                            System.Console.WriteLine("   > Created new container: " + contNew.EditorID);
                            System.Console.WriteLine("   > Added Respawn flag to container: " + contOld.EditorID);
                        }

                        // Count
                        nbCont++;
                    }

                    // Add the containers to the lists
                    containersRespawn.Add(contOld.FormKey, contOld);
                    containersNoRespawn.Add(contNew.FormKey, contNew);
                }
                else
                {
                    // Do nothing
                    //System.Console.WriteLine("Container not found: " + containerGetter.EditorID);
                }
            }

            System.Console.WriteLine("Created " + nbCont + " new containers!");
        }*/

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Create a link cache
            ILinkCache cache = state.LinkCache;

            // Counter
            int nbContTotal = 0;

            /*
             * Swap the placed container in that cell with a No Respawn version
             * 
             */
            /*void DoContainerSwap(IModContext<ISkyrimMod, ISkyrimModGetter, IPlacedObject, IPlacedObjectGetter> placed, IModContext<ICellGetter> cell)
            {
                // Find the base record
                placed.Record.Base.TryResolve(cache, out var baseObject);
                if (baseObject is null || baseObject.EditorID is null) return;

                // If the containers have this editor ID, it is a container
                if (containersRespawn.ContainsKey(baseObject.FormKey))
                {
                    if (Settings.debug)
                        System.Console.WriteLine("Swapping object:" + baseObject.EditorID + " in cell: " + cell.Record.EditorID);

                    // Swap the container base
                    var placedCopy = placed.GetOrAddAsOverride(state.PatchMod);
                    string edidnorespawn = baseObject.EditorID + "_NoRespawn";

                    Container c = containersNoRespawn.Values.Where(x => x?.EditorID == edidnorespawn).First();
                    if (c is null) return;
                    placedCopy.Base.SetTo(c);

                    nbContTotal++;

                    // Set the parent object
                    var parent = (ICellGetter?)placed.Parent?.Record;

                    // Handle ownership properly
                    if (placed?.Record.Ownership is null) return;
                    if (placedCopy.Ownership is null) return;

                    // Just in case the copy has ownership issues
                    if (placedCopy.Ownership.Owner != placed.Record.Ownership.Owner)
                        placedCopy.Ownership.Owner = placed.Record.Ownership.Owner.AsNullable();
                }
                // Container already flagged as "No Respawn"
                else if (containersNoRespawn.ContainsKey(baseObject.FormKey))
                {
                    // Nothing to do!
                }
                // Not a container
                else
                {
                    return;
                }
            }*/
            /*
            /// Check settings
            System.Console.WriteLine("Doing settings checks...");

            if (Settings.CellsNotRespawningSettings.CellNoRespawnEditorIDs.Count == 0)
            {
                System.Console.WriteLine("WARNING: NO SAFE PLAYER HOME SET, ALL CONTAINERS WILL RESPAWN IN ALL CELLS");
            }
            if (Settings.SafeContainersSettings.ContainerEditorIDs.Count == 0)
            {
                System.Console.WriteLine("ERROR: NO CONTAINERS SET, ABORTING! THIS WILL CAUSE MAJOR ISSUES IN YOUR GAME!");
                throw new Exception("Invalid settings!");
            }

            System.Console.WriteLine("Settings seem valid, starting!");


            /// Create a dictionary of placed containers
            System.Console.WriteLine("Starting building containers contexts!");

            // Create the dictionary
            var containerContext = new Lazy<Dictionary<FormKey, IModContext<ISkyrimMod, ISkyrimModGetter, IPlacedObject, IPlacedObjectGetter>>>();

            // Fill the dictionary from the link cache
            state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(cache)
                .Where(ctx => {
                    return containersRespawn.ContainsKey(ctx.Record.Base.FormKey) || containersNoRespawn.ContainsKey(ctx.Record.Base.FormKey);
                })
                .ForEach(ctx => containerContext.Value.Add(ctx.Record.FormKey, ctx));

            System.Console.WriteLine("Containers contexts done!");

            */




            /*System.Console.WriteLine("Starting building object contexts!");

            // Create the dictionary
            var objectContexts = new Lazy<Dictionary<FormKey, IModContext<ISkyrimMod, ISkyrimModGetter, IPlacedObject, IPlacedObjectGetter>>>();

            // Fill the dictionary from the link cache
            state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(cache)
                .Where(ctx => {
                    ctx.TryGetParentSimpleContext<ICellGetter>(out var cell);
                    if (cell is null) return false;
                    cell.TryGetParentSimpleContext<IWorldspaceGetter>(out var worldspace);
                    if (worldspace is null|| worldspace.Record is null || worldspace.Record.EditorID is null) return false;

                    return worldspace.Record.EditorID.Contains("WhiterunWorld", StringComparison.OrdinalIgnoreCase) ;
                })
                .ForEach(ctx => objectContexts.Value.Add(ctx.Record.FormKey, ctx));

            System.Console.WriteLine("Object contexts done!");*/


            /*System.Console.WriteLine("Mapping Tamriel");
            foreach (var worldspaceContext in state.LoadOrder.ListedOrder.Worldspace().WinningContextOverrides())
            {
                if (worldspaceContext.Record.EditorID == "Tamriel")
                {
                    foreach (var block in worldspaceContext.Record.SubCells)
                    {
                        foreach (var subBlock in block.Items)
                        {
                            foreach (var cell in subBlock.Items)
                            {
                                if (cell is null || cell.Grid is null || cell.Grid.Point.IsZero) continue;

                                //System.Console.WriteLine("in cell: " + cell.FormKey + " : " + cell.Name + " / Grid: " + cell.Grid?.Point);
                                

                                tamrielCellGrids.Add(cell.Grid.Point, cell);
                            }
                        }
                    }
                }
            }
            System.Console.WriteLine("Tamriel mapped");*/




            /*foreach (var worldspaceContext in state.LoadOrder.ListedOrder.Worldspace().WinningContextOverrides())
            {
                if(worldspaceContext.Record.EditorID == "WhiterunWorld")
                {
                    foreach (var block in worldspaceContext.Record.SubCells)
                    {
                        foreach (var subBlock in block.Items)
                        {
                            foreach (var cell in subBlock.Items)
                            {
                                if (cell is null || cell.Grid is null) continue;

                                System.Console.WriteLine("in cell: " + cell.FormKey + " : " + cell.Name + " / Grid: " + cell.Grid?.Point);

                                int nb = 0;
                                // On all placed Temporary items
                                foreach (var obj in cell.Temporary)
                                {
                                    if (obj is null || obj is null) continue;

                                    nb++;

                                    objectContexts.Value.TryGetValue(obj.FormKey, out var placedContext);
                                    if (placedContext is null) continue;
                                    var cellState = cell.GetOrAddAsOverride(state.PatchMod);

                                    placedContext.Parent.
                                    //placedContext.Record.
                                }


                                System.Console.WriteLine(" would require moving " + nb + " temp records");
                            }
                        }
                    }
                }
            }*/

            /// Map Tamriel cells 
            System.Console.WriteLine("Mapping Tamriel");
            foreach (var cellContext in state.LoadOrder.ListedOrder.Cell().WinningContextOverrides(cache))
            {
                // Ignore null
                if (cellContext is null || cellContext.Record is null || cellContext.Record.EditorID is null) continue;

                var cell = cellContext.Record;

                // filter out unwanted cells
                if (cell.Flags.HasFlag(Cell.Flag.IsInteriorCell)) continue;
                if (cell.Grid is null) continue;
                else if (!cellContext.TryGetParent<IWorldspaceGetter>(out var worldspace) || !worldspace.FormKey.Equals(Settings.Tamriel.FormKey)) continue;


                //var cellState = cellContext.GetOrAddAsOverride(state.PatchMod);
                tamrielCellGrids.Add(cell.Grid.Point, cellContext);
            
            }
            System.Console.WriteLine("Tamriel mapped");


            /// Map WhiterunWorld cells
            System.Console.WriteLine("Mapping WhiterunWorld");
            foreach (var cellContext in state.LoadOrder.ListedOrder.Cell().WinningContextOverrides(cache))
            {
                // Ignore null
                if (cellContext is null || cellContext.Record is null || cellContext.Parent is null) continue;

                var cell = cellContext.Record;


                // filter out unwanted cells
                //if (cell.Flags.HasFlag(Cell.Flag.IsInteriorCell)) continue;
                if (cell.Grid is null) continue;

                if (!cellContext.TryGetParent<IWorldspaceGetter>(out var worldspace) || !worldspace.FormKey.Equals(Settings.WhiterunWorld.FormKey)) continue;


                var cellState = cellContext.GetOrAddAsOverride(state.PatchMod);
                originalCellGrid.TryAdd(cell.Grid.Point, cellState);
            }
            System.Console.WriteLine("WhiterunWorld mapped!");


            // Check all placed objects 
            foreach (var placed in state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(state.LinkCache))
            {
                // Get parent cell 
                placed.TryGetParentSimpleContext<ICellGetter>(out var cell);

                // Ignore null 
                if (cell is null || cell.Record is null || cell.Record.Grid is null) continue;
                if (placed is null || placed.Record is null || placed.Record.EditorID is null) continue;



                placed.TryGetParentSimpleContext<IWorldspaceGetter>(out var parent);
                if (parent is null || parent.Record is null || parent.Record.EditorID is null) continue;

                if (parent.Record.FormKey.Equals(Settings.WhiterunWorld.FormKey)) 
                {
                    //var cells = state.LoadOrder.PriorityOrder.Cell().WinningOverrides();


                    System.Console.WriteLine("object in worldspace");
                    if (!tamrielCellGrids.TryGetValue(cell.Record.Grid.Point, out var tamrielCell)) continue;
                    
                    var tamriel = tamrielCell.GetOrAddAsOverride(state.PatchMod);

                    originalCellGrid.TryGetValue(cell.Record.Grid.Point, out var original);
                    if (tamriel is null || original is null) continue;


                    var placedState = placed.GetOrAddAsOverride(state.PatchMod);

                    if(original.Persistent.Contains(placedState))
                    {
                        original.Persistent.Remove(placedState);
                        tamriel.Persistent.Add(placedState);
                        System.Console.WriteLine("object moved");
                    }

                    if (original.Temporary.Contains(placedState))
                    {
                        original.Temporary.Remove(placedState);
                        tamriel.Temporary.Add(placedState);
                        System.Console.WriteLine("object moved");
                    }

                    // Swap 
                    //var placedCopy = placed.GetOrAddAsOverride(state.PatchMod);
                    //placedCopy.AttachRef

                    //var t = state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(cache).First();
                    //t.Record.Persistent
                }

                    
                //placed.Parent = 
            }


            /// Iterate on cells and 
            /*foreach (var cellContext in state.LoadOrder.ListedOrder.Cell().WinningContextOverrides(cache))
            {
                // Ignore null
                if (cellContext is null || cellContext.Record is null || cellContext.Parent is null) continue;

                var cell = cellContext.Record;


                // filter out unwanted cells
                //if (cell.Flags.HasFlag(Cell.Flag.IsInteriorCell)) continue;
                if (cell.Grid is null) continue;

                if(!cellContext.TryGetParent<IWorldspaceGetter>(out var worldspace) || !worldspace.FormKey.Equals(Settings.WhiterunWorld.FormKey)) continue;


                var cellState = cellContext.GetOrAddAsOverride(state.PatchMod);

                originalCellGrid.TryAdd(cell.Grid.Point,cellState);

                tamrielCellGrids.TryGetValue(cell.Grid.Point, out var tamrielCell);
                if (tamrielCell is null) continue; //error?

                System.Console.WriteLine("cell persistent: " + cell.Persistent.Count + " / temporary: " + cell.Temporary.Count);
                System.Console.WriteLine("cellstate persistent: " + cellState.Persistent.Count + " / temporary: " + cellState.Temporary.Count);

                if (cell.Persistent is not null)
                {
                    List<IPlaced> newPer = tamrielCell.Persistent;
                    newPer.AddRange(cellState.Persistent);
                    //foreach (var placed in cellState.Persistent)
                    //{
                    //   tamrielCell.Persistent (placed)
                    //}

                    //tamrielCell.Persistent.AddRange(cellState.Persistent);
                    //tamrielCell.Temporary.AddRange(cellState.Temporary);

                    tamrielCell.Persistent.SetTo(newPer);
                }

                if (cell.Temporary is not null)
                {
                    
                    List<IPlaced> newTemp = tamrielCell.Temporary;
                    newTemp.AddRange(cellState.Temporary);

                    tamrielCell.Persistent.SetTo(newTemp);
                }


            }*/

                /*foreach (var cellContext in state.LoadOrder.ListedOrder.Cell().WinningContextOverrides(cache))
                {
                    // Ignore null
                    if (cellContext is null || cellContext.Record is null || cellContext.Record.EditorID is null) continue;

                    // If the cell is listed in the "No respawn" locations
                    if (Settings.CellsNotRespawningSettings.CellNoRespawnEditorIDs.Contains(cellContext.Record.EditorID))
                    {
                        if (Settings.debug)
                            System.Console.WriteLine("Editing cell: " + cellContext.Record.EditorID);

                        // On all placed Temporary items
                        foreach (var obj in cellContext.Record.Temporary)
                        {
                            if (obj is null || obj is null) continue;


                            //FOR SR EXTERIOR obj.DeepCopy().RemapLinks


                            containerContext.Value.TryGetValue(obj.FormKey, out var placedContext);
                            if (placedContext is null) continue;

                            DoContainerSwap(placedContext, cellContext);
                        }

                        // On all placed Persistent items
                        foreach (var obj in cellContext.Record.Persistent)
                        {
                            if (obj is null || obj is null) continue;


                            //FOR SR EXTERIOR obj.DeepCopy().RemapLinks


                            containerContext.Value.TryGetValue(obj.FormKey, out var placedContext);
                            if (placedContext is null) continue;

                            DoContainerSwap(placedContext, cellContext);
                        }
                    }

                }

                System.Console.WriteLine("Swapped " + nbContTotal + " containers for a safe No Respawn one!");

                System.Console.WriteLine("All done!");*/
            }
    }
}
